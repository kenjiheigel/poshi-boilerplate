import org.gradle.internal.os.OperatingSystem

apply plugin: "java"

defaultTasks 'help'

task checkPoshiRunnerExtPropertyFileNames
task executePQLQuery (type: JavaExec)
task expandPoshiRunner (type: Copy)
task help
task runPoshi(type: Test)
task validatePoshi (type: JavaExec)
task writePoshiProperties (type: JavaExec)

OperatingSystem operatingSystem = OperatingSystem.current()

if (operatingSystem.linux) {
	ext.chromeDriverExecutable = "chromedriver"
	ext.executableDirName = "webdriver/linux/"
}
else if (operatingSystem.macOsX) {
	ext.chromeDriverExecutable = "chromedriver"
	ext.executableDirName = "webdriver/mac/"
}
else if (operatingSystem.windows) {
	ext.chromeDriverExecutable = "chromedriver.exe"
	ext.executableDirName = "webdriver/windows/"
}
else {
	throw new IllegalStateException("Unsupported operating system")
}

configurations {
	poshiRunner
}

repositories {
	mavenLocal()

	maven {
		url "https://repository-cdn.liferay.com/nexus/content/groups/public"
	}
}

dependencies {
	poshiRunner group: "com.liferay", name: "com.liferay.poshi.runner", version: "${poshiRunnerVersion}"
	poshiRunner group: "com.liferay", name: "com.liferay.poshi.runner.resources", version: "1.0.11"
}

checkPoshiRunnerExtPropertyFileNames {
	description = 'Displays poshi runner ext property file names.'
	group = 'Poshi'

	if (!project.hasProperty("poshiRunnerExtPropertyFileNames")) {
		println "No poshi runner ext property file names provided, defaulting to null"

		project.ext.poshiRunnerExtPropertyFileNames = null
	}
	else {
		println "Poshi Runner ext property file names: "
		println poshiRunnerExtPropertyFileNames
	}
}

executePQLQuery {
	description = 'Execute PQL query.'
	group = 'Poshi'

	args('executePQLQuery')
	classpath = configurations.poshiRunner
	main = "com.liferay.poshi.runner.PoshiRunnerCommandExecutor"
	systemProperties getPoshiRunnerExtProperties(poshiRunnerExtPropertyFileNames)
	workingDir = "."
}

expandPoshiRunner {
	group = 'Poshi'

	dependsOn clean

	File poshiRunnerJar = findPoshiRunnerJar()

	if (poshiRunnerJar == null) {
		throw new Exception("The Poshi Runner jar cannot be found from dependencies")
	}

	from zipTree(poshiRunnerJar)
	into "$buildDir/poshi-runner"
}

help {
	description = 'Display general usage information.'
	group = 'Poshi'

	println "Format to execute poshi tasks: "
	println "./gradlew <task> -D\"<property=value>\""
	println ""
	println "Format to provide property files for poshi tasks: "
	println "./gradlew <task> -D\"poshiRunnerExtPropertyFileNames=file1,file2\""
	println ""
	println "Example to execute a PQL query:"
	println "./gradlew executePQLQuery -D\"test.batch.property.query=portal.acceptance == true\" -D\"test.base.dir.name=/opt/dev/projects/github/liferay-portal/portal-web/test/functional\""
	println ""
	println "Run './gradlew tasks' to see the list of available tasks"
	println ""
}

runPoshi {
	description = 'Executes a Poshi test.'
	group = 'Poshi'

	dependsOn expandPoshiRunner

	testLogging.showStandardStreams = true

	classpath = configurations.poshiRunner
	include 'com/liferay/poshi/runner/PoshiRunner.class'
	scanForTestClasses = false
	systemProperties getPoshiRunnerExtProperties(poshiRunnerExtPropertyFileNames)
	testClassesDir = new File("$buildDir/poshi-runner")
}

validatePoshi {
	description = 'Validates the Poshi file syntax.'
	group = 'Poshi'

	args('validatePoshi')
	classpath = configurations.poshiRunner
	main = "com.liferay.poshi.runner.PoshiRunnerCommandExecutor"
	systemProperties getPoshiRunnerExtProperties(poshiRunnerExtPropertyFileNames)
	workingDir = "."
}

writePoshiProperties {
	description = 'Generates properties using meta data from Poshi files in the project.'
	group = 'Poshi'

	args('writePoshiProperties')
	classpath = configurations.poshiRunner
	main = "com.liferay.poshi.runner.PoshiRunnerCommandExecutor"
	systemProperties getPoshiRunnerExtProperties(poshiRunnerExtPropertyFileNames)
	workingDir = "."
}

def findPoshiRunnerJar() {
	Iterator<File> iterator = configurations.poshiRunner.iterator();

	while (iterator.hasNext()) {
		File file = iterator.next()

		String fileName = file.getName()

		if (fileName.startsWith("com.liferay.poshi.runner-")) {
			return file
		}
	}

	return null
}

def getPoshiRunnerExtProperties(poshiRunnerExtPropertyFileNames) {
	Properties poshiRunnerExtProperties = new Properties()

	if (poshiRunnerExtPropertyFileNames != null) {
		for (String poshiRunnerExtPropertyFileName : poshiRunnerExtPropertyFileNames.split(",")) {
			try {
				InputStream inputStream = new FileInputStream(
					poshiRunnerExtPropertyFileName)

				poshiRunnerExtProperties.load(inputStream)
			}
			catch (Exception e) {
				e.printStackTrace()

				throw e
			}
		}
	}

	poshiRunnerExtProperties.putAll(System.getProperties())

	poshiRunnerExtProperties.put("selenium.chrome.driver.executable", "${ext.chromeDriverExecutable}")
	poshiRunnerExtProperties.put("selenium.executable.dir.name", "${ext.executableDirName}")

	return poshiRunnerExtProperties
}
